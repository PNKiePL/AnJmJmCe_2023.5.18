#pragma once
#ifndef AJ_JM_JM_CE_H
#define AJ_JM_JM_CE_H

#include  <E:\lib\头文件 c++.h>
#include  <E:\lib\全局量.h>
#include  <E:\lib\文件读写.h>
#include  <E:\lib\文字读取.h>
#include  <E:\lib\数字格式.h>

///#pragma comment(linker,"/subsystem:\"Windows\" /entry:\"mainCRTStartup\"")
#//define 检测是否按下 check
//#define 显示文字 print_letter
//#define 长字符 gks
//#define ct VK_CONTROL
// 
//#define 四位个数 swgu
//#define 四位个数初始化 swguiuh
//#define 四位个数一帧 swguyv

class 按键检测
{
	//GetAsyncKeyState !=0 \ https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getasynckeystate
public:
	数N分<int, 4> 数四分;
	数N分<int, 5> 数五分;
	数N分<int, 6> 数六分;
public:
	SYSTEMTIME sys;
public:
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//通用量
	string 当前时间;
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//记录按键顺序
	string 存档路径无头 = ":/PINKIE PIE/记忆/输入流存档/输入流存档.cpp";
	string 存档路径无头尾 = ":/PINKIE PIE/记忆/输入流存档/";
	string 记录按键顺序存档路径;
	fstream 输入流存档;
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//记录按键次数
	string 按键次数存档路径 = ":/PINKIE PIE/记忆/按键次数存档/按键次数存档.cpp";
	fstream 按键次数存档fstream;
	string 按键次数lujy = ":/PINKIE PIE/记忆/按键次数存档/按键次数存档.cpp";
	fstream 按键次数cpdh;
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//显示按键状态
	//>设置
	int 数字每几位分隔 = 4
		, 按键按下计数 = 0
		, 按键松开计数 = 1
		, 按键按下刷新= 0
		, 按键松开刷新= 1;
	string 按键和计数之间显示 = 按键和计数之间显示初始值, 按键和计数之间显示初始值 = "0" //计数= 记录按键按下次数
		, 布局末尾显示 = "";
	int 键盘布局 = 1;

	//>
	int 按下 = 0; //>按下= 1: 按下, 按下= 2: 放开
	int 现在[1400], 之前[1400], 按键按下次数[1400];
	vector<int> 总按下次数vec;
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//计数 \ 没用了
	int 四位个数 = 0, 四位个数_有数值 = 1, 八位个数 = 0, 四位数个数, 八位数个数, 四位个数初始化 = 0; //>四位个数= >1w的四位数个体 \ 四位个数_有数值= 有数值的四位数个体 \ 四位个数_有数值= 四位个数+1;
	int 计数[46]; //46号出错, 多一个1. 只能有45个
	int 四位个数一帧 = 1, 刷新 = 0; //计数1 = 0, 计数2 = 0, 
public:
	///检测按键按下:
	//>检测和输出是 分开的
	//!检测按键是否按下-->if按键状态有变 \ 按下-->刷新-->计数+1 \ 松开-->刷新;
	按键检测() {
		//刷新后运行-->会一直运行
		总按下次数vec.assign(2, 0);

	}
	void 之前和现在归零(int ish) {
		之前[ish] = 0; 现在[ish] = 0;
	}
	void 之前和现在相等(int vqhxzxd) {
		之前[vqhxzxd] = 现在[vqhxzxd];
	}

	void 之前和现在初始化(int vqhxziuh) {
		for (int i = 0; i < vqhxziuh; i++) {
			之前和现在归零(i);
		}
	}
	void 之前和现在批量相等(int vqhxzplxd) {
		for (int i = 0; i < vqhxzplxd; i++) {
			之前和现在相等(i);
		}
	}

	void 如果之前和现在不同(int rgvqhxzbt) {
		for (int i = 1; i < rgvqhxzbt; i++) {
			if (现在[rgvqhxzbt] != 之前[rgvqhxzbt]) { //!现在和之前
				break;
			}
		}
	}

	void 按键按下次数初始化(int 数量) {
		for (size_t i = 0; i < 数量; i++)
		{
			按键按下次数[i] = 0;
		}
	}

	void color(int cmd颜色) {//改变输出的颜色，比system("color x")快得多
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), cmd颜色);
	}

	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//> 检测按键是否按下 \ 记录按下次数
	void 检测是否按下(int 序号, int 键码) { //之前 现在
		if (GetKeyState(键码) != 0) {
			现在[序号] = 1; //按下
		}
		else {
			现在[序号] = 0; //松开
		}
		if (现在[序号] != 之前[序号]) {
			if (现在[序号] == 1) { //>按下
				按下 = 1;
				if (按键按下计数 == 1)
				{
					按键按下次数[键码] += 1; //>检测按下-->这个数+1
				}
			}
			if (现在[序号] == 0) { //松开
				按下 = 2;
				if (按键松开计数 == 1)
				{
					按键按下次数[键码] += 1;
				}
			}
		}
	}

	void 检测是否按下2(int 序号, int 键码) {
		if (GetKeyState(键码) & 0x8000) //if按下
		{
			现在[序号] = 1; //按下
		}
		else {
			现在[序号] = 0; //松开
		}
		if (现在[序号] != 之前[序号]) {
			if (现在[序号] == 1) { //>按下
				按下 = 1;
				if (按键按下计数 == 1)
				{
					按键按下次数[键码] += 1;
				}
			}
			if (现在[序号] == 0) { //松开
				按下 = 2;
				if (按键松开计数 == 1)
				{
					按键按下次数[键码] += 1;
				}
			}
		}
	}
	//虚拟键值表，模拟按键表
	//https://developer.aliyun.com/article/332609

	/*
	此事来源
	https://blog.csdn.net/everlasting_20141622/article/details/52222006
	*/

	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//!检测 单按键
	void 显示文字_示例(int c1) { //char string wchar_t
		color(7); //112 白
		printf("  %c  ", c1);
	}
	//>显示按键状态
	//显示:
	void 字符(int 键码) { //char string wchar_t
		if (GetKeyState(键码) < 0) { color(177); }
		else {
			color(7);
		}
		printf("  %c  ", 键码);
	}
	void 长字符(int gks1, string str) { //GetKeyState 's'
		if (GetKeyState(gks1) < 0) { color(177); }
		else {
			color(7);
		}
		printf("%s ", str.c_str()); //printf("  %c", gks2);//"  %s", \ cout << gks1;
	}
	void 特殊键(int tuj1, string tuj2) { //符号之类 \ _getch检测
		if (GetKeyState(tuj1) < 0) { color(177); }
		else {
			color(7);
		}
		//if (_kbhit() != 0) {
		//	if (_getch() == tuj1) {
		//		color(177);
		//	}
		//	else {
		//		color(7); //7
		//	}
		//}
		cout << tuj2; //printf("%s ", tuj2.c_str()); //cout << tuj2; //printf("  %s", tuj2);//"  %s",
	}
	void GetAsyncKey键(int 键码, string 按键str) {
		if (GetKeyState(键码) & 0x8000) {
			color(177);
		}
		else {
			color(7);
		}
		cout << 按键str;
	}

	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//显示 按键按下次数
	//>只显示, 不计算 \ 只显示数字
	void 显示计数(int 键码)
	{
		数四分.cout数字(按键按下次数[键码]);
	}
	void 显示计数_会亮(int 键码)
	{
		if (GetKeyState(键码) & 0x8000) {
			color(177);
		}
		else {
			color(7);
		}
		数四分.cout数字(按键按下次数[键码]);
		cout << " ";
	}

	//>只显示, 不计算 \ 显示按键名和 数字
	void 字符加计数(int 键码) { //char string wchar_t
		if (GetKeyState(键码) < 0) { color(177); }
		else {
			color(7);
		}
		printf("  %c", 键码);
		if (按键和计数之间显示 != 按键和计数之间显示初始值)
		{
			cout << 按键和计数之间显示;
		}
		数四分.cout数字(按键按下次数[键码]);
		cout << " ";
	}
	void 长字符加计数(int 键码, string str) { //GetKeyState 's'
		if (GetKeyState(键码) < 0) { color(177); }
		else {
			color(7);
		}
		printf("%s", str.c_str());
		if (按键和计数之间显示 != 按键和计数之间显示初始值)
		{
			cout << 按键和计数之间显示;
		}
		数四分.cout数字(按键按下次数[键码]);
		cout << " ";
	}
	void GetAsyncKey键加计数(int 键码, string 按键str) {
		if (GetKeyState(键码) & 0x8000) {
			color(177);
		}
		else {
			color(7);
		}
		cout << 按键str;
		if (按键和计数之间显示 != 按键和计数之间显示初始值)
		{
			cout << 按键和计数之间显示;
		}
		数四分.cout数字(按键按下次数[键码]);
		cout << " ";
	}
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//>显示按键加 按下计数 \ 显示按键状态和 按键按下次数
	//>只显示, 不计算
	//显示:
	void 字符和次数(int 键码) {
		字符加计数(键码);
	}
	void 长字符和次数(int 键码, string 按键名) {
		长字符加计数(键码, 按键名);
	}
	void GetAsyncKey键和次数(int 键码, string 按键名) {
		GetAsyncKey键加计数(键码, 按键名);
	}
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//cout数字 \ 四位一分开
	auto 清屏并cout数字() //刷新一下
	{
		system("cls");//清屏
		cout数字();
	}
	auto 测试_计数(int 第n个四位数, int uu) {
		计数[第n个四位数] = uu;
	}

	void cout数字_四位个数初始化()
	{
		for (size_t i = 1; i < 14; i++)
		{
			if (计数[i] > 0) {
				四位个数_有数值 = i;
			}
		}
	}

	void cout数字_补充0(int 第n个四位数) //>如果是n位数, 显示4-n个0
	{
		//>左边有数字, 中间+0
		if (四位个数 >= 第n个四位数) { //x左边的四位数有数字, 才需要+0
			int _0的个数 = 4 - to_string(计数[第n个四位数]).size();
			if (_0的个数 >= 0) { //case(负数): 会一直循环 
				for (size_t i = 0; i < _0的个数; i++) {
					cout << "0";
				}
			}
		}
	}
	void cout数字_进位(int 第n个四位数)
	{
		if (计数[第n个四位数] >= 10000) {
			if (四位个数 <= 第n个四位数 - 1) { //限定 \ 只运行一次
				四位个数 = 第n个四位数; //记录位数
				四位个数_有数值 = 第n个四位数 + 1;
			}
			while (计数[第n个四位数] >= 10000) //>进位_限制在4位数 \ 超过4位数就归零
			{
				计数[第n个四位数] = 计数[第n个四位数] - 10000; //进位后归零
				计数[第n个四位数 + 1] += 1; //>左边的四位数 \ 第n+1个四位数
			}
		}
	}
	void 进位_限制在4位数(int 第n个四位数) //进位 /2 \ int 第n个四位数, int 第n加1个四位数 \ int 目标, int 目标加1 \ .
	{
		while (计数[第n个四位数] >= 10000)
		{
			计数[第n个四位数] = 计数[第n个四位数] - 10000; //进位后归零
			计数[第n个四位数 + 1] += 1; //>左边的四位数 \ 第n+1个四位数
		}
	}
	void cout_四位数(int 第n个四位数) //cout_四位数个体
	{
		if (四位个数_有数值 >= 第n个四位数) {
			cout << 计数[第n个四位数] << ",";
		}
	}
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//cout数字 \ 实现功能
	void cout数字() //显示数字
	{
		///计算过程:
		//!进位	从右往左 
		//!显示	从左往右 \ 是否有数字->补充0->显示数字->右边的四位数 
		cout数字_四位个数初始化();
		//x..............................................................................
		//>进位	从小往大
		for (size_t i = 1; i < 14; i++) //从1到140
		{
			cout数字_进位(i);
		}
		//x..............................................................................
		//>显示	从大往小 \ 是否有数字->补充0->显示数字->右边的四位数 
		for (size_t i = 14; i > 1; i--) //从140到1
		{
			cout数字_补充0(i);
			//cout << i<<"="; //>测试 \ 不然看不懂
			cout_四位数(i);
		}
		//补充0 \ 第一个四位数的0 \ 显示0
		cout数字_补充0(1);
		//cout 第1个四位数
		cout << 计数[1];
		cout << '\n';
	}

	void cout数字_每次加一() //!没用
	{
		//>进位-->九位数
		if (计数[2] >= 9999) {
			四位个数 += 1; //进位
			四位个数一帧 = 四位个数;//显示用
			//四位个数 = 四位个数一帧; <-
			计数[3] += 1; //>第二个四位数
			计数[2] = 0;
		}
		//>cout 第3个四位数
		if (四位个数 > 2) {
			//		//cout << 四位个数 << endl; 
					//cout << 计数[四位个数一帧
			cout << 计数[3] << ",";
		}
		//>第二个四位数 显示0
		if (四位个数 > 2) {
			//千位
			if (计数[1] < 1000) { cout << "0"; }
			//cout百位		   
			if (计数[1] < 100) { cout << "0"; }
			//十位
			if (计数[1] < 10) { cout << "0"; }
			//个位
		}

		//>四位数 进位-->五位数
		if (计数[1] >= 9999) {
			四位个数 += 1; //进位
			四位个数一帧 = 四位个数;//显示用
			//四位个数 = 四位个数一帧; <-
			计数[2] += 1; //>第二个四位数
			计数[1] = 0; //进位后归零
		}
		//手动
		if (四位个数 > 1) {
			//		//cout << 四位个数 << endl; 
					//cout << 计数[四位个数一帧
			cout << 计数[2] << ",";
		}

		//中间插0

		//if*3
		/*if (计数[1] < 10)cout << "0";
		if (计数[1] < 100)cout << "0";
		if (计数[1] < 1000)cout << "0";*/

		//1000的if*2 剩下的*3
		///>第一个四位数 显示0
		//cout千位
		if (计数[1] < 1000) { cout << "0"; }
		//cout百位		   
		if (计数[1] < 100) { cout << "0"; }
		//十位
		if (计数[1] < 10) { cout << "0"; }
		//个位
		cout << 计数[1] << endl;


		//自动while
		//while (四位个数一帧 > 0) {
		//	cout << 四位个数 << endl; 
		//	cout << 计数[四位个数一帧]; 
		//	四位个数一帧 -= 1; //要的
		//	//cout << 计数[2];
		//}
		//cout << endl;
		//计数[1] += 1;

		////自动for
		// for(;四位个数一帧>0;四位个数一帧-=1){
		// 	//cout << 四位个数 << endl; 
		//	cout << 计数[四位个数一帧]<< ",";
		//	}
		//cout << endl;
		//计数[1] += 1000;
	}

	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//实现 按键显示
	void 按键显示_cmd() {
		system("cls");//清屏
		//a[数字]才能运行
		// TOdo 外部 数四分		
		数四分.coutvec(总按下次数vec);
		cout << '\n';
		if (按键按下计数 == 1)
		{
			if (按下 == 1) {
				总按下次数vec[1] += 1; //自增
			}
		}
		if (按键松开计数 == 1)
		{
			if (按下 == 1) {
				总按下次数vec[1] += 1; //自增
			}
		}

		//>switch:卡住, 不能运行
		///>键盘布局移出后 \ 计数增加, 不显示其他的
		//switch (键盘布局){case 1:
		//	键盘布局1();
		//	break;
		//case 2:
		//	键盘布局2();
		//	break;
		//default:
		//	break;
		//}

		//>if: 计数不增加
		///>键盘布局移出后 \ 计数增加, 不显示其他的
		//if (键盘布局 == 1){
		//	键盘布局1();
		//}
		//else if (键盘布局 == 2) {
		//	键盘布局2();
		//}

		// TOdo 更换布局
		
		//键盘布局1();
		键盘布局_按键加计数1();
		//键盘布局1加计数();
	}

	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//键盘组件
	void Fn行();
	void 数字行();
	void Q行();
	void CAPS行();
	void SHIFT行();
	void Ctrl行();
	auto Fn加计数行();
	auto 数字加计数行();
	auto Q加计数行();
	auto CAPS加计数行();
	auto SHIFT加计数行();
	auto Ctrl加计数行();
	auto 计数行_Fn行();
	auto 计数行_数字行();
	auto 计数行_Q行();
	auto 计数行_CAPS行();
	auto 计数行_SHIFT行();
	auto 计数行_Ctrl行();
	void 计数布局_会亮();
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//>键盘布局
	void 键盘布局1();
	void 键盘布局2();
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//>键盘布局_按键+计数
	void 键盘布局_按键加计数1();
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//>键盘布局下面 有计数
	void 键盘布局1加计数();
	////>▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬<
	//!写入 输入流
	//零件
	string 返回当前时间(string str)
	{
		GetLocalTime(&sys);
		str.append(to_string(sys.wYear));
		str.append(".");
		str.append(to_string(sys.wMonth));
		str.append(".");
		str.append(to_string(sys.wDay));
		str.append(" ");
		str.append(to_string(sys.wHour)); //h
		str.append(".");
		str.append(to_string(sys.wMinute)); //m
		str.append(" ");
		str.append(to_string(sys.wSecond));
		str.append(".");
		str.append(to_string(sys.wMilliseconds));
		str.append(".cpp");
		return str;
	}

	void 写入输入流存档之一个按键(fstream 输入流存档, string 存档路径)
	{
		//按键检测 按键检测;
		//按键检测.写入输入流存档__一个按键( 输入流存档,  存档路径);
	}

	void 写入输入流存档__一个按键(int gks, string ajjmmy)
	{
		//string gksstring = to_string(gks);
		//写入一个按键
		if (GetKeyState(gks) < 0) {
			输入流存档 << ajjmmy;
			输入流存档 << ";";
		}
	}
	void 写入输入流存档__一个按键(int gks)
	{
		//写入一个按键
		if (GetKeyState(gks) < 0) {
			输入流存档 << gks;
			输入流存档 << ";";
		}
	}
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//主体
	void 写入输入流存档__主体()
	{
		/*//\
	,.{0,99}["]$
		//	\
	^[0-9]{1,99}.{0,99}["]$
		//	\
	^[0-9]{0,99}$
		*/

		写入输入流存档__一个按键(VK_ESCAPE, "ESC ");
		写入输入流存档__一个按键(VK_F1, " F1");
		写入输入流存档__一个按键(VK_F2, " F2");
		写入输入流存档__一个按键(VK_F3, " F3");
		写入输入流存档__一个按键(VK_F4, " F4");
		写入输入流存档__一个按键(VK_F5, " F5");
		写入输入流存档__一个按键(VK_F6, " F6");
		写入输入流存档__一个按键(VK_F7, " F7");
		写入输入流存档__一个按键(VK_F8, " F8");
		写入输入流存档__一个按键(VK_F9, " F9");
		写入输入流存档__一个按键(VK_F10, " F10");
		写入输入流存档__一个按键(VK_F11, " F11");
		写入输入流存档__一个按键(VK_F12, " F12");
		写入输入流存档__一个按键(VK_DELETE, "DELETE");
		写入输入流存档__一个按键('0');
		写入输入流存档__一个按键('1');
		写入输入流存档__一个按键('2');
		写入输入流存档__一个按键('3');
		写入输入流存档__一个按键('4');
		写入输入流存档__一个按键('5');
		写入输入流存档__一个按键('6');
		写入输入流存档__一个按键('7');
		写入输入流存档__一个按键('8');
		写入输入流存档__一个按键('9');
		写入输入流存档__一个按键('9');
		写入输入流存档__一个按键('0');
		写入输入流存档__一个按键(VK_TAB, "TAB");
		写入输入流存档__一个按键('Q');
		写入输入流存档__一个按键('W');
		写入输入流存档__一个按键('E');
		写入输入流存档__一个按键('R');
		写入输入流存档__一个按键('T');
		写入输入流存档__一个按键('Y');
		写入输入流存档__一个按键('U');
		写入输入流存档__一个按键('I');
		写入输入流存档__一个按键('O');
		写入输入流存档__一个按键('P');
		写入输入流存档__一个按键(VK_CAPITAL, "CAPS");
		写入输入流存档__一个按键('A');
		写入输入流存档__一个按键('S');
		写入输入流存档__一个按键('D');
		写入输入流存档__一个按键('F');
		写入输入流存档__一个按键('G');
		写入输入流存档__一个按键('H');
		写入输入流存档__一个按键('J');
		写入输入流存档__一个按键('K');
		写入输入流存档__一个按键('L');
		写入输入流存档__一个按键(VK_RETURN, "RETURN");
		//写入输入流存档__一个按键(VK_SHIFT, "SHIFT");
		写入输入流存档__一个按键('Z');
		写入输入流存档__一个按键('X');
		写入输入流存档__一个按键('C');
		写入输入流存档__一个按键('V');
		写入输入流存档__一个按键('B');
		写入输入流存档__一个按键('N');
		写入输入流存档__一个按键('M');
		写入输入流存档__一个按键(VK_SHIFT, "SHIFT");
		写入输入流存档__一个按键(VK_UP, "UP");
		//写入输入流存档__一个按键(VK_CONTROL, "Ctrl");
		写入输入流存档__一个按键(VK_LWIN, "Win");
		//写入输入流存档__一个按键(VK_LMENU, "LAlt");
		写入输入流存档__一个按键(VK_MENU, "Alt");
		写入输入流存档__一个按键(VK_SPACE, "         SPACE         ");
		写入输入流存档__一个按键(VK_RWIN, "Win");
		//写入输入流存档__一个按键(VK_MENU, "Alt");
		//写入输入流存档__一个按键(VK_RMENU, "RAlt");
		写入输入流存档__一个按键(VK_CONTROL, "Ctrl");
		写入输入流存档__一个按键(VK_LEFT, "LEFT");
		写入输入流存档__一个按键(VK_DOWN, "DOWN");
		写入输入流存档__一个按键(VK_RIGHT, "RIGHT");
		写入输入流存档__一个按键(VK_PRIOR, "PRIOR");
		写入输入流存档__一个按键(VK_NEXT, "NEXT");
		写入输入流存档__一个按键(VK_HOME, "HOME");
		写入输入流存档__一个按键(VK_END, "END");
		写入输入流存档__一个按键(VK_BACK, "  BACK  ");
		写入输入流存档__一个按键(VK_DIVIDE, " /");
		写入输入流存档__一个按键(VK_MULTIPLY, " *");
		写入输入流存档__一个按键(VK_SUBTRACT, " -");
		写入输入流存档__一个按键(VK_ADD, " +");
		写入输入流存档__一个按键(VK_SEPARATOR, "SEPARATOR");
		写入输入流存档__一个按键(VK_DECIMAL, "DECIMAL");
		写入输入流存档__一个按键(VK_NUMPAD7, " N7");
		写入输入流存档__一个按键(VK_NUMPAD8, " N8");
		写入输入流存档__一个按键(VK_NUMPAD9, " N9");
		写入输入流存档__一个按键(VK_NUMPAD4, " N4");
		写入输入流存档__一个按键(VK_NUMPAD5, " N5");
		写入输入流存档__一个按键(VK_NUMPAD6, " N6");
		写入输入流存档__一个按键(VK_NUMPAD1, " N1");
		写入输入流存档__一个按键(VK_NUMPAD2, " N2");
		写入输入流存档__一个按键(VK_NUMPAD3, " N3");
		写入输入流存档__一个按键(VK_NUMPAD0, " N0");

	}
	void 写入输入流存档()
	{
		从末尾读写(输入流存档, 记录按键顺序存档路径);
		//$ 时间 \
			^ 按键
		// 
		输入流存档 << "\n";
		//输入流存档 << endl;
		输入流存档 << '$';
		输入流存档 << " ";
		GetLocalTime(&sys);

		//fprintf (fp, "%4d/%02d/%02d %02d:%02d:%02d.%03d 星期%1d\n",
		//	sys.wYear, sys.wMonth, sys.wDay, sys.wHour, sys.wMinute,
		//	sys.wSecond, sys.wMilliseconds, sys.wDayOfWeek);

		//年月日
		/*uijm = to_string(sys.wYear);
		输入流存档 << uijm;
			输入流存档 << ".";
		uijm = to_string(sys.wMonth);
		输入流存档 << uijm;
			输入流存档 << ".";
		uijm = to_string(sys.wDay);
		输入流存档 << uijm;
			输入流存档 << ".";*/
			//时间
		输入流存档 << to_string(sys.wHour);
		输入流存档 << ".";
		输入流存档 << to_string(sys.wMinute);
		输入流存档 << ".";
		输入流存档 << to_string(sys.wSecond);
		输入流存档 << ".";
		输入流存档 << to_string(sys.wMilliseconds);

		//输入流存档 << ".";
	//uijm = to_string(sys.wDayOfWeek);
	//输入流存档 << uijm;
		输入流存档 << '\n';
		//
		输入流存档 << '^' << " ";
		//写按键
		写入输入流存档__主体();
		//输入流存档 << '\n';
		//输入流存档 << "\n";
		//输入流存档 << endl;

		输入流存档.close();
	}
	//▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
	//out输入流存档
	void cout输入流存档__一个按键(char gks, string ajjmmy)
	{
		//string gksstring= to_string(gks);
		if (GetKeyState(gks) < 0) {
			cout << ajjmmy;
			cout << ";";
		}
	}
	void cout输入流存档__一个按键(char gks)
	{
		if (GetKeyState(gks) < 0) {
			cout << gks;
			cout << ";";
		}
	}
	void cout输入流存档__主体()
	{
		cout输入流存档__一个按键(VK_ESCAPE, "ESC ");
		cout输入流存档__一个按键(VK_F1, " F1");
		cout输入流存档__一个按键(VK_F2, " F2");
		cout输入流存档__一个按键(VK_F3, " F3");
		cout输入流存档__一个按键(VK_F4, " F4");
		cout输入流存档__一个按键(VK_F5, " F5");
		cout输入流存档__一个按键(VK_F6, " F6");
		cout输入流存档__一个按键(VK_F7, " F7");
		cout输入流存档__一个按键(VK_F8, " F8");
		cout输入流存档__一个按键(VK_F9, " F9");
		cout输入流存档__一个按键(VK_F10, " F10");
		cout输入流存档__一个按键(VK_F11, " F11");
		cout输入流存档__一个按键(VK_F12, " F12");
		cout输入流存档__一个按键(VK_DELETE, "DELETE");
		cout输入流存档__一个按键('0');
		cout输入流存档__一个按键('1');
		cout输入流存档__一个按键('2');
		cout输入流存档__一个按键('3');
		cout输入流存档__一个按键('4');
		cout输入流存档__一个按键('5');
		cout输入流存档__一个按键('6');
		cout输入流存档__一个按键('7');
		cout输入流存档__一个按键('8');
		cout输入流存档__一个按键('9');
		cout输入流存档__一个按键('9');
		cout输入流存档__一个按键('0');
		cout输入流存档__一个按键(VK_TAB, "TAB");
		cout输入流存档__一个按键('Q');
		cout输入流存档__一个按键('W');
		cout输入流存档__一个按键('E');
		cout输入流存档__一个按键('R');
		cout输入流存档__一个按键('T');
		cout输入流存档__一个按键('Y');
		cout输入流存档__一个按键('U');
		cout输入流存档__一个按键('I');
		cout输入流存档__一个按键('O');
		cout输入流存档__一个按键('P');
		cout输入流存档__一个按键(VK_CAPITAL, "CAPS");
		cout输入流存档__一个按键('A');
		cout输入流存档__一个按键('S');
		cout输入流存档__一个按键('D');
		cout输入流存档__一个按键('F');
		cout输入流存档__一个按键('G');
		cout输入流存档__一个按键('H');
		cout输入流存档__一个按键('J');
		cout输入流存档__一个按键('K');
		cout输入流存档__一个按键('L');
		cout输入流存档__一个按键(VK_RETURN, "RETURN");
		cout输入流存档__一个按键(VK_SHIFT, "SHIFT");
		cout输入流存档__一个按键('Z');
		cout输入流存档__一个按键('X');
		cout输入流存档__一个按键('C');
		cout输入流存档__一个按键('V');
		cout输入流存档__一个按键('B');
		cout输入流存档__一个按键('N');
		cout输入流存档__一个按键('M');
		cout输入流存档__一个按键(VK_SHIFT, "SHIFT");
		cout输入流存档__一个按键(VK_UP, "UP");
		cout输入流存档__一个按键(VK_CONTROL, "Ctrl");
		cout输入流存档__一个按键(VK_LWIN, "Win");
		cout输入流存档__一个按键(VK_LMENU, "Alt");
		cout输入流存档__一个按键(VK_MENU, "Alt");
		cout输入流存档__一个按键(VK_SPACE, "         SPACE         ");
		cout输入流存档__一个按键(VK_RWIN, "Win");
		cout输入流存档__一个按键(VK_MENU, "Alt");
		cout输入流存档__一个按键(VK_RMENU, "Alt");
		cout输入流存档__一个按键(VK_CONTROL, "Ctrl");
		cout输入流存档__一个按键(VK_LEFT, "LEFT");
		cout输入流存档__一个按键(VK_DOWN, "DOWN");
		cout输入流存档__一个按键(VK_RIGHT, "RIGHT");
		cout输入流存档__一个按键(VK_PRIOR, "PRIOR");
		cout输入流存档__一个按键(VK_NEXT, "NEXT");
		cout输入流存档__一个按键(VK_HOME, "HOME");
		cout输入流存档__一个按键(VK_END, "END");
		cout输入流存档__一个按键(VK_BACK, "  BACK  ");
		cout输入流存档__一个按键(VK_DIVIDE, " /");
		cout输入流存档__一个按键(VK_MULTIPLY, " *");
		cout输入流存档__一个按键(VK_SUBTRACT, " -");
		cout输入流存档__一个按键(VK_ADD, " +");
		cout输入流存档__一个按键(VK_SEPARATOR, "SEPARATOR");
		cout输入流存档__一个按键(VK_DECIMAL, "DECIMAL");
		cout输入流存档__一个按键(VK_NUMPAD7, " N7");
		cout输入流存档__一个按键(VK_NUMPAD8, " N8");
		cout输入流存档__一个按键(VK_NUMPAD9, " N9");
		cout输入流存档__一个按键(VK_NUMPAD4, " N4");
		cout输入流存档__一个按键(VK_NUMPAD5, " N5");
		cout输入流存档__一个按键(VK_NUMPAD6, " N6");
		cout输入流存档__一个按键(VK_NUMPAD1, " N1");
		cout输入流存档__一个按键(VK_NUMPAD2, " N2");
		cout输入流存档__一个按键(VK_NUMPAD3, " N3");
		cout输入流存档__一个按键(VK_NUMPAD0, " N0");
	}
	void cout输入流存档()
	{
		cout << '$' << " ";
		GetLocalTime(&sys);
		printf("%4d/%02d/%02d %02d:%02d:%02d.%03d 星期%1d\n",
			sys.wYear, sys.wMonth, sys.wDay, sys.wHour, sys.wMinute,
			sys.wSecond, sys.wMilliseconds, sys.wDayOfWeek);
		//
		cout << '^' << " ";
		cout输入流存档__主体();
		cout << '\n';
	}
	//======================================================================//======================================================================





};
//----------------------------------------------------------------------//----------------------------------------------------------------------
//======================================================================//======================================================================











#endif